#!/usr/bin/env ruby

=begin
Copyright 2009 Tom Santos

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
=end

require 'optparse'
require 'ostruct'
require 'tempfile'

if ARGV.length == 0
  s = <<EOF
  
  gitadm is a tool for managing a git repositories.  It does nothing for access control except to help
  with adding ssh keys.
  
  Usage:
      add-key       Adds a public key to the account on the specified server
      create-repo   Creates a new git repository
      
EOF
  puts s
  exit(1)
end

command = ARGV[0].gsub('-', '_').to_sym
ARGS = ARGV[1..-1] if ARGV.length > 1
options = OpenStruct.new
options.user = 'git'

def user_opt opts, options
  opts.on('-u', '--user [USER]', "The git user on the machine. Defaults to 'git'.") do |user|
    options.user = user
  end
end

def server_opt opts, options
  opts.on('-s', '--server SERVER', "The host of the git repository") do |server|
    options.server = server
  end
end

def help_opt opts
  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

=begin
  We add a key to the authorized_keys file for the git account on the server.  This will only
  work if you already have your key pushed to the server.  It's intended as a way to add new keys
  for existing users.
=end
if :add_key == command
  opts = OptionParser.new do |opts|
    opts.banner = "Usage:"
    user_opt(opts, options)
    server_opt(opts, options)
    opts.on('-f', '--pub-key-file [FILE]', 'The file containing the public key(s)') do |path|
      options.pub_key_path = path
    end
    opts.on('-i', '--stdin', 'get the key(s) from stdin') do
      options.stdin = true
    end
    help_opt(opts)
  end
  if !defined? ARGS then puts opts; exit(1); end
  opts.parse! ARGS
  
  # Setup the key file to send
  file = nil
  
  if options.stdin
    file = Tempfile.new("gitadm")
    File.open(file.path, 'w') do |f|
      f.puts($stdin.readline)
    end
  elsif options.pub_key_path
    file = File.new(options.pub_key_path)
  end
  
  ssh = "ssh #{options.user}@#{options.server}"

  # Copy the key over as a temp file
  file_name = File.basename(file.path)
  `scp #{file.path} #{options.user}@#{options.server}:/tmp/#{file_name}`
  
  # Figure out which authorized_keys file they're using 
  auth_file = ".ssh/authorized_keys"
  auth_file = `#{ssh} '[ -f #{auth_file} ] && echo "#{auth_file}" || echo "#{auth_file}2"'`.strip
  
  # Get the key into the auth file and cleanup temp
  `#{ssh} 'cat /tmp/#{file_name} >> #{auth_file}'`
  `#{ssh} 'rm /tmp/#{file_name}'`

=begin
  Creates a new bare git repository at the given path.  It also allows you to send the current
  directory to the new repo and associates the repository and the local dir.
=end
elsif :create_repo == command
  opts = OptionParser.new do |opts|
    opts.banner = "Usage:"
    user_opt(opts, options)
    server_opt(opts, options)
    opts.on('-r', '--path-to-repo REPO', 'The path to the repository on the server') do |path|
      options.repo_path = (path =~ /.git$/ ? path : "#{path}.git")
    end
    opts.on('-d', '--use-dir', "Associates the current dir with the new repo and sends the files") do
      options.use_dir = true
    end
    help_opt(opts)
  end
  if !defined? ARGS then puts opts; exit(1); end
  opts.parse! ARGS
  
  # Make the new dir and init it
  ssh = "ssh #{options.user}@#{options.server}"
  `#{ssh} 'mkdir -p #{options.repo_path}'`
  `#{ssh} 'cd #{options.repo_path} ; git --bare init'`
  
  # Upload dir contents and wire-up git pull and push
  if options.use_dir
    `git init ; git add * ; git commit -m "Initial commit"`
    `git remote add origin #{options.user}@#{options.server}:#{options.repo_path}`
    `git push origin master`
    `git config branch.master.remote origin ; git config branch.master.merge refs/heads/master`
  end
end
